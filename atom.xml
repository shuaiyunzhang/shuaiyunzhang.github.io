<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Nekonyan's秘密基地]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="https://nekonyan.me/"/>
  <updated>2015-08-03T15:38:54.000Z</updated>
  <id>https://nekonyan.me/</id>
  
  <author>
    <name><![CDATA[nekonyan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[对于前端模块化的学习总结]]></title>
    <link href="https://nekonyan.me/2015/08/02/%E5%AF%B9%E4%BA%8E%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://nekonyan.me/2015/08/02/对于前端模块化的学习总结/</id>
    <published>2015-08-02T01:43:07.000Z</published>
    <updated>2015-08-03T15:38:54.000Z</updated>
    <content type="html"><![CDATA[<p>在自己对于前端知识的探索和学习中，发现了<strong>模块化</strong>这个概念，或者叫<strong>前端模块化</strong>，在对相关资料进行学习之后，我发现前端模块化对于开发来说是一个非常有用的东西。本篇文章是我学习前端模块化的类似于学习笔记式的总结。</p>
<p>需要说明一点的是，前端模块化更适应于繁重的大型项目，对于我这种实践经验本身就很少的小小白来说，前端模块化更偏向于一种概念化的东西，但还是在网上找到了一些练习资料，也算是多多少少实践了一把。</p>
<a id="more"></a>
<h2 id="模块化的概念">模块化的概念</h2><p>先来看一段Fex上的一段话</p>
<blockquote>
<p>模块化是一种处理复杂系统分解成为更好的可管理模块的方式，它可以把系统代码划分为一系列职责单一，高度解耦且可替换的模块，系统中某一部分的变化将如何影响其它部分就会变得显而易见，系统的可维护性更加简单易得</p>
</blockquote>
<p>从这一段话中，可以看出模块化的几个好处：</p>
<ol>
<li>减少依赖，减少耦合</li>
<li>代码复用，提高开发效率</li>
<li>便于测试，提升维护性</li>
</ol>
<p>在实际的开发中，一个模块相当于整个项目最小单位，这个单位是某一个不可再细分的功能模块。</p>
<h2 id="前端模块化的目的">前端模块化的目的</h2><p>在查找资料时了解到很多其他软件开发领域或者编程语言基本上都已经实现了模块化，前端开发领域这几年在理论和实践方面的飞速发展，模块化概念开始被重视，比如脚本加载器（或者叫Module Loader）RequireJS，AMD，</p>
<h2 id="如何前端模块化">如何前端模块化</h2><h2 id="参考">参考</h2><ul>
<li><a href="http://fex.baidu.com/blog/2014/03/fis-module/" target="_blank" rel="external">http://fex.baidu.com/blog/2014/03/fis-module/</a></li>
<li><a href="http://segmentfault.com/a/1190000002638831" target="_blank" rel="external">http://segmentfault.com/a/1190000002638831</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>在自己对于前端知识的探索和学习中，发现了<strong>模块化</strong>这个概念，或者叫<strong>前端模块化</strong>，在对相关资料进行学习之后，我发现前端模块化对于开发来说是一个非常有用的东西。本篇文章是我学习前端模块化的类似于学习笔记式的总结。</p>
<p>需要说明一点的是，前端模块化更适应于繁重的大型项目，对于我这种实践经验本身就很少的小小白来说，前端模块化更偏向于一种概念化的东西，但还是在网上找到了一些练习资料，也算是多多少少实践了一把。</p>]]>
    
    </summary>
    
      <category term="CSS" scheme="https://nekonyan.me/tags/CSS/"/>
    
      <category term="FE" scheme="https://nekonyan.me/tags/FE/"/>
    
      <category term="JavaScript" scheme="https://nekonyan.me/tags/JavaScript/"/>
    
      <category term="template" scheme="https://nekonyan.me/tags/template/"/>
    
      <category term="模块化" scheme="https://nekonyan.me/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[对于MV*模式的初步理解]]></title>
    <link href="https://nekonyan.me/2015/08/01/%E5%AF%B9%E4%BA%8EMV-%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/"/>
    <id>https://nekonyan.me/2015/08/01/对于MV-模式的初步理解/</id>
    <published>2015-08-01T09:28:38.000Z</published>
    <updated>2015-08-01T09:31:00.000Z</updated>
    <content type="html"><![CDATA[<p>除了设计模式外，还有一种叫做<strong>架构模式（architectural pattern）——我的理解就是软件架构</strong>来研究如何设计程序结构，而以<strong>MVC、MVP、MVVM</strong>为代表的<strong>MV*</strong>就是一种架构模式，也就是说<strong>MV*不是设计模式</strong>，不过由于MVC里面包含了设计模式，比如观察者模式，所以我的理解就是<strong>架构模式是多种设计模式的综合</strong>。</p>
<p>而在前端这块，这三种架构模式常常被用来设计各种框架、库、模版引擎，比如Backbone.js、Ember.js、Spine.js、Angular.js、React.js等等，前一段时间想了解的博客主题中也采用了相关设计，在这篇文章中我会对近期学习这三者的简单理解进行总结。</p>
<a id="more"></a>
<h2 id="UI中的三个问题：State（状态）、Logic（逻辑）和Synchronization（同步）">UI中的三个问题：State（状态）、Logic（逻辑）和Synchronization（同步）</h2><p>State：可以称为状态或者叫数据，它意味着UI当前描述的数据。</p>
<p>Logic：这里的逻辑指的是UI逻辑，我的理解是交互（或者叫显示）的逻辑，而不是业务逻辑。</p>
<p>Synchronization：指的是UI需要与业务变化保持一致，比如说一些数据。</p>
<h2 id="MVC">MVC</h2><p><strong>MVC</strong>是<strong>Model（模型）</strong>、<strong>View（视图）</strong>、<strong>Controller（控制器）</strong>三个单词首字母的缩写。Model代表了业务数据，View代表了用户界面，Controller代表了业务逻辑和用户输入。这三部分既相互独立又相互联系。</p>
<p><strong>Model</strong>和View之间是观察者模式，当Model改变时，它会通知它的观察者View（可能会有多个观察者View），这样View就可以做出相应改变。Model可以复用。</p>
<p><strong>View</strong>是Model的可视化表示，在JavaScript是关于构建和维和一个DOM元素，一个View会检测Model，并在Model更改时进行通知，使View本身能够相应的更新。</p>
<p><strong>Controller</strong>是Model和View之间的中介，当用户操作View时，它通常负责更新Model，它也会根据不同的action（用户的操作）来决定View的显示，这里我的理解是它单纯地负责路由，如果它更偏向于View的逻辑部分，那么这个C就会变成MVP中的P。</p>
<p><img src="http://7vzok8.com1.z0.glb.clouddn.com/MVC-Process.svg" alt="MVC各个元素之间的关系"></p>
<p>在MVC中，View里面的每一个action（用户操作）都与一个Controller中action的调用相关联，一旦Controller完成了相关处理，它就会返回给View，让View进行渲染，相关顺序：</p>
<blockquote>
<p>Action in the View -&gt; Call to Controller -&gt; Controller Logic -&gt; Controller returns the View</p>
</blockquote>
<p>另外View和Controller之间是没有绑定的，View只是根据Controller返回的结果进行渲染，因此它是无状态的。</p>
<h2 id="MVP">MVP</h2><p><strong>MVP</strong>是<strong>Model（模型）</strong>、<strong>View（视图）</strong>、<strong>Presenter（表示器）</strong>三个单词首字母的缩写。M和V的意思和MVC差不多，它是MVC模式的一种衍生模式，专注于改进表示逻辑，这里我的理解是Presenter包含了View的业务逻辑，所以说是改进了表示逻辑。正因为它包含了View的业务逻辑，来自View的调用将委托给Presenter，Presenter从View中解耦，通过接口与它对话。</p>
<p>举个例子，一个人点击了“保存”按钮，这个事件就会委托给Presenter中的“OnSave”方法，一旦保存完成，Presenter就会通过它的接口回调给View，这样View就可以显示保存已经完成。</p>
<p><img src="http://7vzok8.com1.z0.glb.clouddn.com/Model_View_Presenter_GUI_Design_Pattern.png" alt="MVP各个元素之间的关系"></p>
<p>Presenter处于View和Model之间，从Model中取数据，格式化后让View显示。</p>
<p>Passive View（被动视图）是指View保存着State，但业务逻辑保存在Presenter中，Presenter是View和Model的中介者，使得View和Model分离开来（这和MVC不同，MVC中V和M并没有完全分离）。</p>
<p>Supervising Controller（监管表示器）是指Presenter是某种形式的Controller（所以说它是MVC的衍生模式），Presenter可以明白View的行为，但反之不行</p>
<h2 id="MVVM">MVVM</h2><p><strong>MVVM</strong>是<strong>Model（模型）</strong>、<strong>View（视图）</strong>、<strong>ViewModel（视图模型）</strong>三个单词首字母的缩写。我认为它和MVP比较相似，ViewModel相当于MVP中Presenter的位置。在MVP提到过View和Presenter是通过接口来进行交互，而在MVVM中则是通过数据绑定来进行交互，这是双向而且自动的。</p>
<p><img src="http://7vzok8.com1.z0.glb.clouddn.com/MVVMPattern.png" alt="MVVVM各元素之间的关系"></p>
<p>VM其实也是V和M的中介者，用维基百科上的话说就是一个“值转换器（a value converter）”，将Model中的数据对象转换为View可以直接使用的形式。Model保存原始格式的数据，View包含格式化后的数据。</p>
<h2 id="小结">小结</h2><p>个人认为这三种模式都有其适应的场景，并不是谁先进谁落后的问题，它们都以将视图和逻辑分离为目标，但在一些具体实现上还是有所差别，比如说MVVM中的数据绑定就很好的优化了数据频繁更新的问题。</p>
<p>本篇文章只是我学习MV<em>架构模式的初步理解，还有很多地方值得思考，比如这三种模式的具体应用和实现，比如每一个组件之间的依赖关系，比如说业务逻辑和显示逻辑两者的理解等等，以后逐步完善对于MV\</em>的的理解。</p>
<h2 id="参考">参考</h2><ul>
<li><a href="http://book.douban.com/subject/24744217/" target="_blank" rel="external">《JavaScript设计模式》</a></li>
<li><a href="http://www.codeproject.com/Articles/66585/Comparison-of-Architecture-presentation-patterns-M" target="_blank" rel="external">http://www.codeproject.com/Articles/66585/Comparison-of-Architecture-presentation-patterns-M</a></li>
<li><a href="http://stackoverflow.com/questions/2056/what-are-mvp-and-mvc-and-what-is-the-difference" target="_blank" rel="external">http://stackoverflow.com/questions/2056/what-are-mvp-and-mvc-and-what-is-the-difference</a></li>
<li><a href="http://stackoverflow.com/questions/667781/what-is-the-difference-between-mvc-and-mvvm" target="_blank" rel="external">http://stackoverflow.com/questions/667781/what-is-the-difference-between-mvc-and-mvvm</a></li>
<li><a href="http://www.zhihu.com/question/20148405" target="_blank" rel="external">http://www.zhihu.com/question/20148405</a></li>
<li><a href="https://en.wikipedia.org/wiki/Model_View_ViewModel" target="_blank" rel="external">https://en.wikipedia.org/wiki/Model_View_ViewModel</a></li>
<li><a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" target="_blank" rel="external">https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller</a></li>
<li><a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter" target="_blank" rel="external">https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html</a></li>
<li><a href="http://www.cnblogs.com/winter-cn/p/4285171.html" target="_blank" rel="external">http://www.cnblogs.com/winter-cn/p/4285171.html</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>除了设计模式外，还有一种叫做<strong>架构模式（architectural pattern）——我的理解就是软件架构</strong>来研究如何设计程序结构，而以<strong>MVC、MVP、MVVM</strong>为代表的<strong>MV*</strong>就是一种架构模式，也就是说<strong>MV*不是设计模式</strong>，不过由于MVC里面包含了设计模式，比如观察者模式，所以我的理解就是<strong>架构模式是多种设计模式的综合</strong>。</p>
<p>而在前端这块，这三种架构模式常常被用来设计各种框架、库、模版引擎，比如Backbone.js、Ember.js、Spine.js、Angular.js、React.js等等，前一段时间想了解的博客主题中也采用了相关设计，在这篇文章中我会对近期学习这三者的简单理解进行总结。</p>]]>
    
    </summary>
    
      <category term="MVC" scheme="https://nekonyan.me/tags/MVC/"/>
    
      <category term="MVP" scheme="https://nekonyan.me/tags/MVP/"/>
    
      <category term="MVVM" scheme="https://nekonyan.me/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS布局之圣杯布局&双飞翼布局以及栅格系统]]></title>
    <link href="https://nekonyan.me/2015/07/17/CSS%E5%B8%83%E5%B1%80%E4%B9%8B%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80-%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/"/>
    <id>https://nekonyan.me/2015/07/17/CSS布局之圣杯布局-双飞翼布局/</id>
    <published>2015-07-17T09:27:23.000Z</published>
    <updated>2015-07-18T10:36:12.000Z</updated>
    <content type="html"><![CDATA[<p>最近在整理IFE的学习资料，发现了双飞翼布局的介绍，稍微探究一下发现这个布局实在是很出名，甚至于今年的阿里和百度实习生面试时都被问到了，所以准备对这类布局认真学习整理一下。</p>
<a id="more"></a>
<h3 id="介绍">介绍</h3><h4 id="背景">背景</h4><p>首先圣杯布局来自于a list part上的一篇文章：<a href="http://www.alistapart.com/articles/holygrail/" target="_blank" rel="external">http://www.alistapart.com/articles/holygrail/</a> ，而双飞翼布局(flying-wing)则据说来自于淘宝UED（没去考证）。但这两者要解决的问题却是一样的，就是两边定宽，中间自适应的三栏布局，一般中间栏要放在文档流前面以优先渲染。如果从“圣杯”或者“双飞翼”这两个词语展开想象，就会发现脑海中的形象和要解决的问题还是蛮符合的。</p>
<h4 id="常规实现">常规实现</h4><p>这两种布局的实现方式总的来说是一致的，只是在某些具体细节上有不同。首先他俩都需要三栏全部float浮动，但左右两栏通过负<code>margin</code>得以和中间栏并排，形成三栏布局。</p>
<h5 id="圣杯布局">圣杯布局</h5><p>HTML</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"hd"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"bd"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"sub"</span>&gt;</span>sub<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"extra"</span>&gt;</span>extra<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"ft"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>CSS</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.main</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;    <span class="comment">/* 自适应 */</span></span><br><span class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#39c</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">300px</span></span></span>;</span><br><span class="line"><span class="rule">&#125;</span></span></span><br><span class="line"><span class="class">.sub</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">190px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> -<span class="number">100%</span></span></span>;    <span class="comment">/* 让它飘上去，处于同一水平线，extra同 */</span></span><br><span class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#f60</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">300px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">left</span>:<span class="value"> -<span class="number">190px</span></span></span>;    <span class="comment">/* 不遮挡中栏内容，extra同 */</span></span><br><span class="line"><span class="rule">&#125;</span></span></span><br><span class="line"><span class="class">.extra</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">230px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> -<span class="number">230px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#666</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">300px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">right</span>:<span class="value"> -<span class="number">230px</span></span></span>;</span><br><span class="line"><span class="rule">&#125;</span></span></span><br><span class="line"><span class="id">#bd</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">230px</span> <span class="number">0</span> <span class="number">190px</span></span></span>;</span><br><span class="line"><span class="rule">&#125;</span></span></span><br></pre></td></tr></table></figure>
<p>实现效果如图</p>
<p><img src="http://7vzok8.com1.z0.glb.clouddn.com/holygrail.png" alt="hlygrail"></p>
<p>圣杯布局，为了中间<code>div</code>内容不被遮挡，将中间大<code>div</code>设置了左右<code>padding-left</code>和<code>padding-right</code>后（这里是直接用<code>padding</code>来实现），将左右两个<code>div</code>用相对布局<code>position: relative</code>并分别配合<code>right</code>和<code>left</code>属性，以便左右两栏<code>div</code>移动后不遮挡中间div。</p>
<h5 id="双飞翼布局">双飞翼布局</h5><p>HTML</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"hd"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"bd"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"main"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"main-wrap"</span>&gt;</span>main<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"sub"</span>&gt;</span>sub<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"extra"</span>&gt;</span>extra<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"ft"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>CSS</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.main</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;    <span class="comment">/* 自适应 */</span></span><br><span class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#39c</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">300px</span></span></span>;</span><br><span class="line"><span class="rule">&#125;</span></span></span><br><span class="line"><span class="class">.main-wrap</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">190px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> <span class="number">230px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">300px</span></span></span>;</span><br><span class="line"><span class="rule">&#125;</span></span></span><br><span class="line"><span class="class">.sub</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">190px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> -<span class="number">100%</span></span></span>;    <span class="comment">/* 让它飘上去，处于同一水平线，extra同 */</span></span><br><span class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#f60</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">300px</span></span></span>;</span><br><span class="line"><span class="rule">&#125;</span></span></span><br><span class="line"><span class="class">.extra</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">230px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> -<span class="number">230px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#666</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">300px</span></span></span>;</span><br><span class="line"><span class="rule">&#125;</span></span></span><br><span class="line"><span class="id">#bd</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">230px</span> <span class="number">0</span> <span class="number">190px</span></span></span>;</span><br><span class="line"><span class="rule">&#125;</span></span></span><br></pre></td></tr></table></figure>
<p>实现效果如图</p>
<p><img src="http://7vzok8.com1.z0.glb.clouddn.com/flying-wing.png" alt="flying-wing"></p>
<p>双飞翼布局，为了中间<code>div</code>内容不被遮挡，直接在中栏<code>div</code>内部创建子<code>div</code>用于放置中栏内容，在该子<code>div</code>里用<code>margin-left</code>和<code>margin-right</code>为左右两栏<code>div</code>留出位置。</p>
<h4 id="总结">总结</h4><p>总的来说，双飞翼比圣杯多了一个<code>div</code>，但少了<code>position: relative</code>，此外，貌似双飞翼布局的兼容性要好一点，尤其是在低版本IE中。两种布局分别代表了两种不同的路线，双飞翼是用margin来实现中间内容不遮挡，圣杯则是用padding来实现中间内容不遮挡。</p>
<h3 id="What’s_more…">What’s more…</h3><p>在前端这一块，CSS负责表现，这个“表现”可以理解出很多意思，比如样式，比如布局。CSS布局的实现虽然很多，但可以发现基本上离不开三种方法：</p>
<ol>
<li><em>浮动 float</em></li>
<li><em>负边距 negative margin</em></li>
<li><em>相对定位 relative position（其实绝对定位用的也蛮多的）</em></li>
</ol>
<p>灵活使用这三种方法加以组合就可以实现很多布局方案</p>
<p>无论是双飞翼还是圣杯布局，它们都属于多栏或多列布局，这种类型最有名的应该是Bootstrap的栅格系统，这里会对其使用和原理做简单介绍。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"col-xs-12"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这是使用Bootstrap栅格系统的正确格式</p>
<p>首先来看<code>.container</code>的源码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.container</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">padding-right</span>:<span class="value"> <span class="number">15px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding-left</span>:<span class="value"> <span class="number">15px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> auto</span></span>;</span><br><span class="line"><span class="rule">&#125;</span></span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> (min-width: <span class="number">768px</span>) </span>&#123;</span><br><span class="line">  <span class="class">.container</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">750px</span></span></span>;</span><br><span class="line">  <span class="rule">&#125;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> (min-width: <span class="number">992px</span>) </span>&#123;</span><br><span class="line">  <span class="class">.container</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">970px</span></span></span>;</span><br><span class="line">  <span class="rule">&#125;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> (min-width: <span class="number">1200px</span>) </span>&#123;</span><br><span class="line">  <span class="class">.container</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">1170px</span></span></span>;</span><br><span class="line">  <span class="rule">&#125;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>响应式尺寸的改变其实改变的是<code>.container</code>，左右两边均有15px的内边距。</p>
<p>再来看<code>.row</code>的源码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.row</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> -<span class="number">15px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> -<span class="number">15px</span></span></span>;</span><br><span class="line"><span class="rule">&#125;</span></span></span><br></pre></td></tr></table></figure>
<p>很显然<code>.row</code>的负外边距恰好抵消了<code>.container</code>的内边距或者说重叠。</p>
<p>最后来看列（column）的源码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.col-xs-1</span>, <span class="class">.col-sm-1</span>, <span class="class">.col-md-1</span>, <span class="class">.col-lg-1</span>, <span class="class">.col-xs-2</span>, <span class="class">.col-sm-2</span>, <span class="class">.col-md-2</span>, <span class="class">.col-lg-2</span>, <span class="class">.col-xs-3</span>, <span class="class">.col-sm-3</span>, <span class="class">.col-md-3</span>, <span class="class">.col-lg-3</span>, <span class="class">.col-xs-4</span>, <span class="class">.col-sm-4</span>, <span class="class">.col-md-4</span>, <span class="class">.col-lg-4</span>, <span class="class">.col-xs-5</span>, <span class="class">.col-sm-5</span>, <span class="class">.col-md-5</span>, <span class="class">.col-lg-5</span>, <span class="class">.col-xs-6</span>, <span class="class">.col-sm-6</span>, <span class="class">.col-md-6</span>, <span class="class">.col-lg-6</span>, <span class="class">.col-xs-7</span>, <span class="class">.col-sm-7</span>, <span class="class">.col-md-7</span>, <span class="class">.col-lg-7</span>, <span class="class">.col-xs-8</span>, <span class="class">.col-sm-8</span>, <span class="class">.col-md-8</span>, <span class="class">.col-lg-8</span>, <span class="class">.col-xs-9</span>, <span class="class">.col-sm-9</span>, <span class="class">.col-md-9</span>, <span class="class">.col-lg-9</span>, <span class="class">.col-xs-10</span>, <span class="class">.col-sm-10</span>, <span class="class">.col-md-10</span>, <span class="class">.col-lg-10</span>, <span class="class">.col-xs-11</span>, <span class="class">.col-sm-11</span>, <span class="class">.col-md-11</span>, <span class="class">.col-lg-11</span>, <span class="class">.col-xs-12</span>, <span class="class">.col-sm-12</span>, <span class="class">.col-md-12</span>, <span class="class">.col-lg-12</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">min-height</span>:<span class="value"> <span class="number">1px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding-right</span>:<span class="value"> <span class="number">15px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding-left</span>:<span class="value"> <span class="number">15px</span></span></span>;</span><br><span class="line"><span class="rule">&#125;</span></span></span><br></pre></td></tr></table></figure>
<p>每一列均有15px的内边距，这一处的内边距也会和外面的重叠区域发生重合，导致每一列左右两边的间距为15px，但每两列之间的间距会是30px。</p>
<p>绕了那么多，既有负外边距，也有内边距，搞了那么麻烦的事的目的就是为了使得列内容拥有充分的留白。</p>
<p>至于Bootstrap栅格常用的嵌套、偏移和排序背后的代码分析，这里就做进一步阐述了。</p>
<h3 id="参考">参考</h3><ol>
<li><a href="http://www.zhihu.com/question/21504052" target="_blank" rel="external">http://www.zhihu.com/question/21504052</a></li>
<li><a href="http://www.imooc.com/wenda/detail/254035" target="_blank" rel="external">http://www.imooc.com/wenda/detail/254035</a></li>
<li><a href="http://www.cnblogs.com/langzs/archive/2013/01/27/taobaoshuangfeiyi.html" target="_blank" rel="external">http://www.cnblogs.com/langzs/archive/2013/01/27/taobaoshuangfeiyi.html</a></li>
<li><a href="http://www.tuicool.com/articles/Afuu2q" target="_blank" rel="external">http://www.tuicool.com/articles/Afuu2q</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在整理IFE的学习资料，发现了双飞翼布局的介绍，稍微探究一下发现这个布局实在是很出名，甚至于今年的阿里和百度实习生面试时都被问到了，所以准备对这类布局认真学习整理一下。</p>]]>
    
    </summary>
    
      <category term="Bootstrap" scheme="https://nekonyan.me/tags/Bootstrap/"/>
    
      <category term="CSS" scheme="https://nekonyan.me/tags/CSS/"/>
    
      <category term="FE" scheme="https://nekonyan.me/tags/FE/"/>
    
      <category term="IFE" scheme="https://nekonyan.me/tags/IFE/"/>
    
      <category term="双飞翼布局" scheme="https://nekonyan.me/tags/%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/"/>
    
      <category term="圣杯布局" scheme="https://nekonyan.me/tags/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80/"/>
    
      <category term="栅格系统" scheme="https://nekonyan.me/tags/%E6%A0%85%E6%A0%BC%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BFC的初步探索]]></title>
    <link href="https://nekonyan.me/2015/05/12/BFC%E7%9A%84%E5%88%9D%E6%AD%A5%E6%8E%A2%E7%B4%A2/"/>
    <id>https://nekonyan.me/2015/05/12/BFC的初步探索/</id>
    <published>2015-05-12T15:12:10.000Z</published>
    <updated>2015-05-14T14:35:10.000Z</updated>
    <content type="html"><![CDATA[<h2 id="1、因为一句话引起的疑问。">1、因为一句话引起的疑问。</h2><p>最近在温故《CSS权威指南》第三版时在“浮动与定位“那一章看到一句话：</p>
<blockquote>
<p>浮动元素会生成一个块级框，而不论这个元素本身是什么······它会像块级元素一样摆放和表现。对浮动元素声明<code>display: block</code>也不是不可能，不过没有必要这么做</p>
</blockquote>
<p>看到这句话，我产生了一个疑问，如果浮动元素生成了一个块级框的话，按照块级元素的特性，那么比如两个同级别的<code>div</code>在浮动以后也应该是另起一行的，也就是说浮动后和浮动前的表现没有区别。当然，在浏览器中实际的表现显然不是这样，而是更像<code>display: inline-block</code>的表现，为此我专门去找了<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements" target="_blank" rel="external">块级元素</a>的定义和<a href="http://www.w3.org/wiki/CSS/Properties/float" target="_blank" rel="external">浮动</a>的定义仔细看了看。虽然没有找到能够解释我上面疑惑的解答，但使我对于浮动有了更进一步的认识，在下一节姑且说一下，做一个记录。</p>
<p>最后我在阅读有关BFC的资料里面找到了可以解释上面问题的相关论述，算是解决了这个问题。</p>
<a id="more"></a>
<h2 id="2、对于浮动的进一步理解">2、对于浮动的进一步理解</h2><p>仔细想来，浮动这一概念应该是我当初学习CSS最难理解的概念之一，主要是元素浮动后会产生一些违反常识的效果，并不仅仅是元素浮动到哪一边就了事。</p>
<p>后来在逐渐的学习中，对于浮动我有了自己的一套理解：<strong>浮动会脱离正常的文档流，然后飘到比原来文档高一个层次的位置（在Z轴上），根据浮动属性值在父元素的范围限制下尽量往上（在Y轴上）靠边（在X轴上）飘，我会假想在正上方有一个光源，因此浮动后的元素在原来文档的位置会有一块阴影，原文档元素不能侵犯这块阴影区域，所以浮动后的元素还是会对文档产生影响。这里提一句就是绝对定位是从正常文档流删除，并且不会对文档其他部分产生影响，这个元素相当于不存在了，浮动还是基于正常的文档流</strong>，所以比如图片进行浮动后，文字会环绕这个图片。但后来我发现元素其实会进入我说的那块阴影区域，这个时候我就不理解了。比如说前面说的文字环绕，如果打开浏览器开发者工具，会发现<code>p</code>元素的范围其实已经进入了那块阴影区域，设置背景颜色就可以发现这一点。这说明我的理解有错吗？现在来看，大体上没错，但在一些细节上还是不够具体，导致理解有偏差。</p>
<p>在W3C的wiki上对于<code>float</code>的<a href="http://www.w3.org/wiki/CSS/Properties/float" target="_blank" rel="external">解释</a>是这样的：</p>
<blockquote>
<p><code>left</code> : The element generates a block box that is floated to the left. Content flows on the right side of the box, starting at the top.</p>
</blockquote>
<p>仔细品味这句话时，我明白了前面说的细节在哪里，“Content flows”，主语为Content，指的是其他元素的“内容”，而不是元素本身，比如说<code>p</code>元素，它本身是块级元素，所以元素本身范围会前后各占一行，但元素内容是文本，所以不会侵犯阴影区域，产生围绕效果。也就是说不会侵犯阴影区域的只是其他元素的内容（如果里面嵌套了其他元素也算是内容），而不是元素本身。</p>
<h2 id="3、BFC的定义">3、BFC的定义</h2><p>像很多网上介绍BFC一样，这里先介绍<strong>Box</strong>和<strong>Formatting Context</strong>的概念。</p>
<h3 id="Box:_CSS布局的基本单位">Box: CSS布局的基本单位</h3><p>具体W3C文档看<a href="http://www.w3.org/TR/CSS21/visuren.html" target="_blank" rel="external">这里</a><br>Box是CSS布局的对象和基本单位，直观点来说，就是一个页面是由很多个Box(即boxes)组成的。元素的类型和display属性，决定了这个Box的类型。不同类型的Box， 会参与不同的Formatting context(一个决定如何渲染文档的容器)，因此Box内的元素会以不同的方式渲染。常见的盒子类型</p>
<ol>
<li>block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；</li>
<li>inline-level box:display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；</li>
</ol>
<h3 id="Formatting_context">Formatting context</h3><p>Formatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。</p>
<p>CSS3 中还增加了 GFC 和 FFC。</p>
<h3 id="BFC">BFC</h3><p><a href="http://www.w3.org/TR/CSS2/visuren.html#block-formatting" target="_blank" rel="external">W3C文档链接</a></p>
<p>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</p>
<h3 id="BFC的一些规则">BFC的一些规则</h3><ol>
<li>内部的Box会在垂直方向，从顶部开始一个接一个地放置。</li>
<li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生叠加</li>
<li>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>
<li>BFC的区域不会与float box叠加。</li>
<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然。（这句话很重要！！！）</li>
<li>计算BFC的高度时，浮动元素也参与计算。</li>
</ol>
<h3 id="创建BFC的情况">创建BFC的情况</h3><ol>
<li>根元素或其它包含它的元素</li>
<li>浮动 (元素的 float 不为 none)</li>
<li>绝对定位元素 (元素的 position 为 absolute 或 fixed)</li>
<li>内联块 inline-blocks (元素的 display: inline-block)</li>
<li>表格单元格 (元素的 display: table-cell，HTML表格单元格默认属性)</li>
<li>表格标题 (元素的 display: table-caption, HTML表格标题默认属性)</li>
<li>overflow 的值不为 visible的元素</li>
<li>弹性盒 flex boxes (元素的 display: flex 或 inline-flex)</li>
</ol>
<h3 id="我对于BFC的理解">我对于BFC的理解</h3><p>对于BFC我一直有一个疑问，那就是display 属性为 inline，会生成 inline-level box。并且参与IFC，而不是BFC，但创建BFC的一种情况明确就是元素的 display: inline-block，这不是自相矛盾吗？</p>
<p>意识到这个问题，在网上问了一些人，但解释的感觉不是很清楚，后来自己对照BFC的一些应用案例努力理解，有了一些自己的想法。</p>
<p>首先需要认识到的一点就是参与BFC和生成/创建/形成BFC的概念是不同的。正如前面所说的“只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。”这句话指的是只有block-level box才能参与BFC的创建，是一个前提条件。而创建BFC，是指创建一块渲染区域，这个区域里面包含了block-level box，这样理解的话就不会出现矛盾了。</p>
<p>在深入理解了BFC之后就可以对本文最开头的疑问做出一些解释了。</p>
<p>首先float之后，元素本身就创建了BFC，这点毋庸置疑，根据BFC的性质，这块区域就是一个隔离的独立容器了，两个float元素自然就会像display: inline-block一样进行表现了。那float生成的块级框呢？这就需要放到上一层来讨论，块级框肯定生成了Block-level box，这个Block-level box就只能参与上一层形成的BFC。一个很简单的例子。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"overflow: hidden;"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"float: left;background-color: red;"</span>&gt;</span>1<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"float: left;background-color: red;"</span>&gt;</span>2<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>很明显，最外面的div也形成了一个BFC，里面又有两个BFC，所以能够防止塌陷，如果里面的div参与到上一层的BFC中是不是应该在垂直方向，从顶部开始一个接一个地放置呢？浏览器显然没有这么处理，在<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="external">MDN</a>上有这么一段话</p>
<blockquote>
<p>块格式化上下文包括了创建该上下文的元素的所有子元素，但不包括创建了新的块格式化上下文的子元素。</p>
</blockquote>
<p>这句话就解决了这个问题，对于上一层的BFC来说，里面两个div（创建了新的BFC）是不包括在内的，上面提到的问题也就无从谈起了。</p>
<p><strong>说到这里，我感觉有必要说一下最前面的那个疑问了，了解了这么多，我认为块级元素前后新起一行的显示效果会被BFC的显示效果所覆盖，也就是说BFC的优先级更高。</strong></p>
<h3 id="BFC的具体应用">BFC的具体应用</h3><p>这方面网络上有很多资料，大体上是三个：自适应两栏布局、清除内部浮动、防止垂直margin重叠（相邻的盒子可能是兄弟关系也可能是祖先关系，w3cplus那篇文章里面提到的clearance很有意思，值得一看，见下面链接）。</p>
<p>详细的代码也就不说了，网上的信息很全。<br>抛几个链接：</p>
<ul>
<li><a href="http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html" target="_blank" rel="external">http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html</a></li>
<li><a href="http://www.html-js.com/article/1866" target="_blank" rel="external">http://www.html-js.com/article/1866</a></li>
<li><a href="http://www.w3cplus.com/css/understanding-bfc-and-margin-collapse.html" target="_blank" rel="external">http://www.w3cplus.com/css/understanding-bfc-and-margin-collapse.html</a></li>
</ul>
<p>前面在写规则时，说第五点很重要是因为BFC内部的元素和外部的元素绝对不会互相影响，因此，当BFC外部存在浮动时，它不应该影响BFC内部Box的布局，BFC会通过变窄，而不与浮动有重叠。同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1、因为一句话引起的疑问。">1、因为一句话引起的疑问。</h2><p>最近在温故《CSS权威指南》第三版时在“浮动与定位“那一章看到一句话：</p>
<blockquote>
<p>浮动元素会生成一个块级框，而不论这个元素本身是什么······它会像块级元素一样摆放和表现。对浮动元素声明<code>display: block</code>也不是不可能，不过没有必要这么做</p>
</blockquote>
<p>看到这句话，我产生了一个疑问，如果浮动元素生成了一个块级框的话，按照块级元素的特性，那么比如两个同级别的<code>div</code>在浮动以后也应该是另起一行的，也就是说浮动后和浮动前的表现没有区别。当然，在浏览器中实际的表现显然不是这样，而是更像<code>display: inline-block</code>的表现，为此我专门去找了<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements">块级元素</a>的定义和<a href="http://www.w3.org/wiki/CSS/Properties/float">浮动</a>的定义仔细看了看。虽然没有找到能够解释我上面疑惑的解答，但使我对于浮动有了更进一步的认识，在下一节姑且说一下，做一个记录。</p>
<p>最后我在阅读有关BFC的资料里面找到了可以解释上面问题的相关论述，算是解决了这个问题。</p>]]>
    
    </summary>
    
      <category term="BFC" scheme="https://nekonyan.me/tags/BFC/"/>
    
      <category term="CSS" scheme="https://nekonyan.me/tags/CSS/"/>
    
      <category term="FE" scheme="https://nekonyan.me/tags/FE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[网站http改为https方法的初步探索]]></title>
    <link href="https://nekonyan.me/2015/04/06/%E7%BD%91%E7%AB%99http%E6%94%B9%E4%B8%BAhttps%E6%96%B9%E6%B3%95%E7%9A%84%E5%88%9D%E6%AD%A5%E6%8E%A2%E7%B4%A2/"/>
    <id>https://nekonyan.me/2015/04/06/网站http改为https方法的初步探索/</id>
    <published>2015-04-06T13:33:11.000Z</published>
    <updated>2015-04-06T15:30:05.000Z</updated>
    <content type="html"><![CDATA[<p>这一两年来，信息安全越来越受关注，前不久百度也宣布全站https（不过在网上查到一些消息说，以前百度对https貌似不是很友好），https使得网络上的通讯变得更为安全，当然，没有完美的事物，https也存在被劫持的问题，此外，谷歌曾经也发布公告说会对采用https的网站优先排名。总的来说，使用https是大势所趋。</p>
<p>作为一个关注前沿信息技术的伪极客，我开始关注起https来，了解了很多关于https技术的信息，也琢磨着能不能将我的博客访问从http改为https，为此，我开始在网上疯狂找东西，最终的结果还是有的，只是让人很不满意，最后的结果是如果直接在URL上直接输入<a href="https://nekonyan.me" target="_blank" rel="external">https://nekonyan.me</a> ，就会发现：</p>
<a id="more"></a>
<ol>
<li><p>会出现内容，至少说明ssl certificate是可用的（一般的网站直接将url改为https是找不到网页的），只不过样式并没有加载（可能是mixed content中链接的原因，但不确定）</p>
</li>
<li><p>点击其中的链接，根据浏览器的提示，链接全部变为<a href="https://nekonyan.me/xxx" target="_blank" rel="external">https://nekonyan.me/xxx</a> ，但点击进去，全部没内容，但如果你在此时的URL上加上一个正斜杠，内容又有了，当然还是没有样式（可能是网页代码托管服务器的处理URL问题，但不确定）</p>
</li>
<li><p>第2点的解决方法并不是万无一失，点击任意一个具体的标签就会发现就算在URL的最后加上正斜杠也是没有内容的（这个想不到可能的原因）</p>
</li>
<li><p>当然，文章和RSS的链接是直接可以点击的，不需要加斜杠（从浏览器提示来说这些链接最后）</p>
</li>
<li><p>使用https，网页加载变得极为缓慢，不过这个原因好猜，应该使用了国外cloudflare的缘故</p>
</li>
<li><p>https页面刷新就显示不了内容了，这是最让我受不了的一点，按照理论来说，https和http网站直观的使用感受是一样的，http怎样表现，https也怎么表现，可我这里事与愿违（想不到原因）</p>
</li>
<li><p>最后一点是使用https后，我chrome（目前最新版）能够显示，但FireFox、Safari还有虚拟机中的IE11无法打开，国内一众浏览器貌似也能打开，虽然cloudflare官方回复是说有浏览器和操作系统限制（链接），但我这里又不是老掉牙的浏览器和操作系统，按理来说不会出现问题呀（无法确定原因）</p>
</li>
</ol>
<p>很幸运的是如果是通过http来访问还是很流畅，并没有影响什么。你可能会问现在改URL为什么也是显示找不到内容，具体原因在第五部分第二小点进行阐述。虽然效果并不是很好，但我还是想把我的过程写出来，毕竟只是初步探索，如果谁发现了有更好的方法请一定告诉我！！！</p>
<h2 id="一、什么是HTTPS">一、什么是HTTPS</h2><p>https是http运行在SSL之上（over），SSL运行在TCP之上（over），我的理解就是https比http多了一层协议进行加密，不过也不能简单的理解为https＝http＋ssl，因为毕竟https是应用层协议（默认端口为443），只能理解为https的构成结构为http＋ssl，相应的因为多了一层加密协议，会花费更多的时间。</p>
<p>https最核心的应该是ssl证书，通过该证书浏览器可以验证网站的身份，保证和网站信息传递的安全性，也可以防止信息泄漏被偷听。</p>
<p>采用https后，最明显的就是URL前会出现一个锁型小图标，具体什么样子分情况。以下是几种情况：</p>
<ol>
<li><p><img src="http://7vzok8.com1.z0.glb.clouddn.com/EVhttps.png" alt="EVhttps"><br>EV SSL（扩展验证型）证书，颁发机构（CA）颁发前会进行更严格的身份审核，并在证书信息中写明组织机构等信息，以此提高证书对用户的可信度。</p>
</li>
<li><p><img src="http://7vzok8.com1.z0.glb.clouddn.com/normalhttps.png" alt="normalhttps">普通的SSL证书，只针对域名，不提供详细的所属组织机构信息。</p>
</li>
<li><p><img src="http://7vzok8.com1.z0.glb.clouddn.com/mixedhttps.png" alt="mixedhttps">页面中调用了非安全传输的资源（不是https开头），如外链图片或JS文件（mixed content），它们有可能在网络传输中被第三方截取、篡改，从而可能危及整个页面的安全性。</p>
</li>
</ol>
<p>从这里看出ssl证书的权威性是保证https通信安全的关键，而保证ssl证书权威性的机构就是颁发证书的CA，我想这也许就是权威性高的ssl证书价格高的原因吧，毕竟单纯从数学算法角度来说，生成证书是很容易的，在一些服务器环境就是几个命令的问题，但这种证书对于那些对安全敏感的公司机构肯定是不够的，购买权威CA颁发的证书更安全，这些证书也得到了个大浏览器厂商的认证。下面这张图最能说明各个组成的关系：<br><img src="http://7vzok8.com1.z0.glb.clouddn.com/https.png" alt="https"></p>
<h2 id="二、一般情况改为HTTPS的方法">二、一般情况改为HTTPS的方法</h2><p>这里指的是服务器环境或者可以操作服务器环境的网站的改为https方法，由于我的博客只是静态资源托管在gitcafe，所以对于这一点，我并没有仔细去研究。不过从看的资料来说，过程大致是购买具有公信力的证书，对服务器进行配置，基本不关客户端的事，如果感觉那些高大上机构的证书贵，可以去买便宜的，甚至是免费的ssl证书，不过各种风险肯定是有的。</p>
<h2 id="三、网站是否有必要改为HTTPS">三、网站是否有必要改为HTTPS</h2><p>关于这个问题其实也很简单，看需求，脱离了实际情况来讨论问题就是耍流氓！对于重视用户安全隐私的网站使用https还是很有必要的，比如说银行（虽然国内还比较少），在线支付平台（支付宝），等等，另外新兴的技术论坛社区也蛮喜欢用https的，可能里面用户隐私、和谐的东西比较多吧。。。，而向新闻、视频网站相对来说，https就不是那么重要了，同理，其实个人博客也不是那么需要，我仅仅是探索性质的尝试。我分享一篇外国人的博客：<a href="http://nickcraver.com/blog/2013/04/23/stackoverflow-com-the-road-to-ssl/" target="_blank" rel="external">Stackoverflow.com: the road to SSL</a>，里面以StackOverflow为例，对采用HTTPS进行了讨论，有启发价值。</p>
<h2 id="四、不同ssl服务的选择">四、不同ssl服务的选择</h2><p>前面说过ssl证书很重要，因此这里主要ssl服务主要是指CA的选择，高大上的有verisign、globalsign，特别是verisign在银行业务方面应用广泛，不过，个人的使用没必要用到这些（也用不起。。。），所以这里讲的主要是相对实惠甚至免费的ssl证书，我了解到的主要实惠的有PositiveSSL/EssentialSSL/RapidSSL三种，</p>
<ol>
<li>PositiveSSL 是 GeoTrust 的低端品牌 </li>
<li>EssentialSSL 是 Comodo 的</li>
<li>RapidSSL 是 Twate 的</li>
</ol>
<p>GeoTrust、Twate、Comodo三者均是较早的SSL数字签名服务商, 被信任比率彼此相当，作为他们的中间证书，受信任的比率与根证书基本上一致的。GeoTrust 和 Twate 均被 Verisign 收购，并入了 现在的Symantec公司。</p>
<p>虽然说是相对实惠，但每年也是几百块钱RMB啊，作为学生党，感觉划不来，最重要的是他们貌似都需要网站服务器支持ssl，我的博客原来是托管在github pages上的，现在转到了gitcafe pages，仅仅只是一个托管平台，根本不可能对服务器进行操作，另外我抱着尝试着的心态去了解了Github Pages的信息，发现它是不支持https的，在Gitcafe上询问工作人员结果也是不支持，所以基本上断了这条路。而免费的ssl证书像startssl，还有域名注册机构赠送的ssl证书也是差不多的问题，而且像startssl这些还时不时被Q掉，情况真的很糟糕。</p>
<p>我意识到我必须通过一个中介来实现https，通过询问网上认识一些牛人，别人很随意的指点了cloudflare这条路，使用它的Flexible SSL Mode，这可忙坏我了，因为这完全是新东西，以前要研究东西，网上很多人已经做了，有了大量的资料还是中文，但这次不同，很少有人通过这种方法为托管平台实现HTTPS，有资料还是简单的英文资料，遇到了问题只能看官方介绍文档和社区的解答，虽然过程比较苦逼，但我发现这条路是可行的，我了解到ssl证书是和网站IP绑定的，也就是ssl证书与网站一一对应，但cloudflare并没有给每个使用它们服务的用户分配ssl证书，它的证书貌似是Comodo的，原理是用户访问网站时会经过他们的服务器来实现https，<a href="https://blog.cloudflare.com/introducing-universal-ssl/" target="_blank" rel="external">具体介绍</a>，下面是他们提供的三种模式：<br><img src="http://7vzok8.com1.z0.glb.clouddn.com/ssl.png" alt="CF SSL Mode"></p>
<p>理解是服务器没开ssl就选择第一种（Flexible），如果你是自签的证书就选第二种（Full），你买了证书就选第三种（Full strict）。很明显，我这种情况只适合Flexible Mode，不过就像给我指导的那个人所说，这个只是看起来实现了https，的确，这种方法并没有全程使用ssl，只是在用户和cloudflare那一段使用了ssl，不过对于我探索来说，已经够了。另外cloudflare会在2015年进入国内，所以不用担心被Q的问题了。</p>
<h2 id="五、个人博客改为https的方法">五、个人博客改为https的方法</h2><ol>
<li>注册cloudflare账号。</li>
</ol>
<p>按照指示，注册账号，它会有几个步骤，在其中的一步她会给出两个nameserver地址。</p>
<ol>
<li>修改nameserver。</li>
</ol>
<p>它会要求你去当初域名注册的机构修改nameserver地址，拿我自己作比方，我是在godaddy注册域名的(如果实在不知道可以使用whois来查询)，是用DNSpod做dns解析，当初需要将godaddy的nameserver改为dnspod提供的nameserver，现在需要将那个nameserver改为cloudflare提供的nameserver，当然很多人不愿意修改，在V2EX上看到一种解决办法那就是将nameserver改为CF的后，等到显示https可用（将URL改为https，不断刷新，显示出页面就说明已激活，官方说时间是最多24小时，但我的激活时间应该是十多分钟），就将nameserver改回来，再在提供dns解析网站设置一条A或者NS记录，指向CloudFlare提供的某个nameserver地址。这可行吗？结论是不可行，所以现在我的博客无法通过https访问，CF的官方回答大意是它会隔一段时间检测nameserver值，发现改动则不提供ssl服务。那为什么不就用CF的nameserver呢？原因同样简单：慢！</p>
<ol>
<li>修改Page Rules</li>
</ol>
<p>激活后，进入dashboard，点击设置，弹出的选项中会有一个page rules，点击进入page rules页面，这个页面关键有几点，一是需要写pattern，pattern的意思是下面各种规则的匹配对象，直接写域名就行，也可以加上http:// 或者www子域名，另外可以使用*来匹配，如<a href="http://nekonyan.me" target="_blank" rel="external">http://nekonyan.me</a> ；二是要想一直使用https，请选择always uses https，这样整个网站都会使用https，如果不这样就会在网站中点击站内链接时又变为http；三就是在下面的SSL规则中选择Flexible SSL，千万别选错，不然也会没法访问。最后就是add rule了。一般过个几分钟，规则就会生效。其他规则可自行摸索。</p>
<p>如果还有什么问题的话，可以去CloudFlare的<a href="https://support.cloudflare.com/hc/en-us" target="_blank" rel="external">支持板块</a>寻找帮助</p>
<p>参考资料：<br>1、<a href="https://www.benburwell.com/posts/configuring-cloudflare-universal-ssl/" target="_blank" rel="external">https://www.benburwell.com/posts/configuring-cloudflare-universal-ssl/</a></p>
<p>2、<a href="https://icloud.net/blog/86/how-to-enable-ssl-conection-with-cloudflare-for-free-plan-users/" target="_blank" rel="external">https://icloud.net/blog/86/how-to-enable-ssl-conection-with-cloudflare-for-free-plan-users/</a></p>
<p>3、<a href="https://support.cloudflare.com/hc/en-us/articles/200168306-Is-there-a-tutorial-for-Page-Rules-" target="_blank" rel="external">https://support.cloudflare.com/hc/en-us/articles/200168306-Is-there-a-tutorial-for-Page-Rules-</a></p>
<h2 id="六、总结">六、总结</h2><p>总的来说，我通过CloudFlare的Flexible SSL Mode实现了https，但效果不是很理想，而且最后因为被CF检测到nameserver变动的原因导致SSL服务被禁用。而对于Flexible SSL Mode本身而言，其实算不得上真正的https，毕竟只有一段进行了SSL加密，不过这次探索还是很有意义的，使我对http改为https的方法过程有了一个粗浅的了解。日后有时间的话，肯定会对这一块重新进行探索，解决当初遇到的问题。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这一两年来，信息安全越来越受关注，前不久百度也宣布全站https（不过在网上查到一些消息说，以前百度对https貌似不是很友好），https使得网络上的通讯变得更为安全，当然，没有完美的事物，https也存在被劫持的问题，此外，谷歌曾经也发布公告说会对采用https的网站优先排名。总的来说，使用https是大势所趋。</p>
<p>作为一个关注前沿信息技术的伪极客，我开始关注起https来，了解了很多关于https技术的信息，也琢磨着能不能将我的博客访问从http改为https，为此，我开始在网上疯狂找东西，最终的结果还是有的，只是让人很不满意，最后的结果是如果直接在URL上直接输入<a href="https://nekonyan.me">https://nekonyan.me</a> ，就会发现：</p>]]>
    
    </summary>
    
      <category term="CloudFlare" scheme="https://nekonyan.me/tags/CloudFlare/"/>
    
      <category term="HTTPS" scheme="https://nekonyan.me/tags/HTTPS/"/>
    
      <category term="SSL" scheme="https://nekonyan.me/tags/SSL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[博客从GitHub迁移到GitCafe的记录]]></title>
    <link href="https://nekonyan.me/2015/03/27/%E5%8D%9A%E5%AE%A2%E4%BB%8EGitHub%E8%BF%81%E7%A7%BB%E5%88%B0GitCafe%E7%9A%84%E8%AE%B0%E5%BD%95/"/>
    <id>https://nekonyan.me/2015/03/27/博客从GitHub迁移到GitCafe的记录/</id>
    <published>2015-03-27T09:32:05.000Z</published>
    <updated>2015-03-27T14:11:43.000Z</updated>
    <content type="html"><![CDATA[<p>有时候GitHub的确很难打开（就比如今天下午一些时候），相应的托管在上面的博客访问速度也受到了影响。以前看到过别人将博客托管在GitCafe上，当时的访问速度让我眼前一亮，十分流畅。因此，时隔这么久之后，我决定将Hexo博客迁移到GitCafe上，也算是做个备份。本篇文章主要是对托管在GitHub上的Hexo博客迁移到GitCafe过程的记录，也算是我开始认真写博客的开始。</p>
<h2 id="准备工作">准备工作</h2><ol>
<li><p>首先需要注册一个<a href="https://gitcafe.com" target="_blank" rel="external">GitCafe</a>账号，GitCafe的操作习惯和GitHub很相似，熟悉GitHub的上手比较快。</p>
</li>
<li><p>注册完成之后，前往<em>SSH公钥管理</em>添加SSH公钥，这里我直接使用GitHub的.pub文件密钥</p>
</li>
</ol>
<a id="more"></a>
<h2 id="在GitCafe上新建一个博客项目">在GitCafe上新建一个博客项目</h2><p>新建过程其实和GitHub也差不多，<a href="https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9#wiki" target="_blank" rel="external">这里</a>是官网的教程。具体来说就是，创建一个与用户名(如果是组织，就是组织名)相同名称的项目。如果你创建的项目名与用户名相同，GitCafe会自动识别成这是一个Page项目。</p>
<h2 id="创建gitcafe-pages分支（branch）">创建gitcafe-pages分支（branch）</h2><p>进入到博客目录下面的“.deploy-git”目录下，注意这个目录默认是隐藏的。使用以下命令创建该分支，并切换到该分支，通俗理解该分支其实就是一个文件夹。<br><code>git checkout -b gitcafe-pages</code></p>
<h2 id="添加到gitcafe的远程仓库">添加到gitcafe的远程仓库</h2><p>在该分支目录下执行该命令：<br><code>git remote add origin &#39;git@gitcafe.com:yourname/yourname.git&#39;</code></p>
<p>将yourname替换为你的GitCafe用户名即可。</p>
<h2 id="最后push到gitcafe仓库">最后push到gitcafe仓库</h2><p>同样是在该分支目录下执行该命令：<br><code>git push -u origin gitcafe-pages</code></p>
<p>以后使用<code>hexo g</code>生成静态文件之后到“.deploy-git”目录下执行该命令即可。</p>
<h2 id="绑定域名">绑定域名</h2><p>进入项目管理界面，点击自定义域名，再次参见<a href="https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9#wiki" target="_blank" rel="external">官方教程</a>，在在域名管理界面（我的是DNSPod）添加一个CNAME记录时，如果出现无法再添加CNAME的情况，可以添加一个A记录，值为207.226.141.135（应该是gitcafe服务器的地址）。</p>
<h2 id="修改”_config-yml”">修改”_config.yml”</h2><p>想要直接使用<code>hexo d</code>提交到GitCafe需要修改博客目录下的“_config.yml”，格式如下：</p>
<pre><code><span class="attribute">deploy</span>:
  <span class="attribute">type</span>: git
  <span class="attribute">repository</span>: git<span class="variable">@gitcafe</span>.<span class="attribute">com</span>:yourname/yourname.git
  <span class="attribute">branch</span>: gitcafe-pages
</code></pre><h2 id="问题">问题</h2><p>在deploy时遇到了一个问题，显示为<code>error: failed to push some refs to &#39;git@gitcafe.com:shuaiyunzhang/shuaiyunzhang.git&#39;</code>，解决方法为将.deploy-git文件夹删除（在Mac中用命令行删除更为方便）再重新尝试即可。</p>
<h2 id="其他">其他</h2><p>如果想再同步到GitHub只需要切换分支即可，进入到“.deploy-git”目录执行以下命令，切换git工作分支为master：<br><code>git checkout master</code></p>
<p>然后就直接像之前使用hexo一样即可,<code>hexo d</code>可以直接提交到github。如果再想提交到gitcafe直接再切换回gitcafe-pages分支即可。可以使用以下命令查看当前工作分支：<br><code>git branch</code><br>不过在网上找资料时貌似还可以同时同步两个，这点暂时放下，以后有时间再去研究。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有时候GitHub的确很难打开（就比如今天下午一些时候），相应的托管在上面的博客访问速度也受到了影响。以前看到过别人将博客托管在GitCafe上，当时的访问速度让我眼前一亮，十分流畅。因此，时隔这么久之后，我决定将Hexo博客迁移到GitCafe上，也算是做个备份。本篇文章主要是对托管在GitHub上的Hexo博客迁移到GitCafe过程的记录，也算是我开始认真写博客的开始。</p>
<h2 id="准备工作">准备工作</h2><ol>
<li><p>首先需要注册一个<a href="https://gitcafe.com">GitCafe</a>账号，GitCafe的操作习惯和GitHub很相似，熟悉GitHub的上手比较快。</p>
</li>
<li><p>注册完成之后，前往<em>SSH公钥管理</em>添加SSH公钥，这里我直接使用GitHub的.pub文件密钥</p>
</li>
</ol>]]>
    
    </summary>
    
      <category term="GitCafe" scheme="https://nekonyan.me/tags/GitCafe/"/>
    
      <category term="GitHub" scheme="https://nekonyan.me/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo博客搭建二三事]]></title>
    <link href="https://nekonyan.me/2015/02/17/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%BA%8C%E4%B8%89%E4%BA%8B/"/>
    <id>https://nekonyan.me/2015/02/17/Hexo博客搭建二三事/</id>
    <published>2015-02-17T03:03:38.000Z</published>
    <updated>2015-02-17T11:51:32.000Z</updated>
    <content type="html"><![CDATA[<p>一直想做些好玩的事了，比如说做个个人网站啥的（虽然做个网站是基础中的基础，没多大技术含量……汗颜），在看到同学捣腾的<a href="http://www.jellybool.com/" target="_blank" rel="external">作品</a>后，心向往之，但由于本人拖延症已到晚期，五月病时不时还要发作一下，迟迟未开始，在深刻认识到技术需要实践这个道理之后，终于动工啦！用《舰队collection》里面的话来说就是“不要怂，单纵就是干”！</p>
<p>这篇文章主要是对博客搭建过程做个记录，但不会很详细的讲述。以下分为三个方面来做阐述：采用的工具、搭建流程以及遇到的问题。如果这些浅薄的文字能够帮助到遇到同样问题的有缘人，那是我的荣幸。</p>
<h2 id="采用的工具">采用的工具</h2><ol>
<li><a href="http://hexo.io/" target="_blank" rel="external">Hexo</a></li>
<li><a href="https://github.com/" target="_blank" rel="external">Github Pages</a></li>
<li><a href="http://msysgit.github.io/" target="_blank" rel="external">Git</a>或者<a href="https://windows.github.com/" target="_blank" rel="external">Github for Windows</a></li>
<li><a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a></li>
<li><a href="http://duoshuo.com/" target="_blank" rel="external">多说</a></li>
<li><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">Next Theme</a></li>
<li><a href="http://www.qiniu.com/" target="_blank" rel="external">七牛</a></li>
<li><a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime Text 3</a></li>
</ol>
<a id="more"></a>
<h3 id="Hexo:">Hexo:</h3><p>Hexo是一款基于nodejs的轻量博客框架。还支持Markdown编辑。使用以及特性点击上面的Hexo链接查看即可，容易上手。我选择Hexo，主要因为nodejs，最近一直在捣腾nodejs，所以想用nodejs通用前后端，做一些好玩的东西（PHP就没多大新意了）在学习了express+nodejs一段时间后，发现要在短时间内用它制作博客，对于我来说还是比较困难的，所以直接动用了Hexo。</p>
<h3 id="Github_Pages:">Github Pages:</h3><p>这是github免费提供的代码托管服务，好像是有300M的空间，其他的一些参数也都满足个人博客的需求，几乎现在所有IT从业者都有github的账号，怎么使用也就不阐述。不过因为一些“你懂得”的原因，github国内访问比较慢，过段时间会把数据迁移到gitcafe上，看了一些别人的博客，感觉速度很快。</p>
<h3 id="Git:">Git:</h3><p>使用git的话，需要掌握一些简单的命令操作，不过网上教程蛮多的，照猫画虎就行，用着用着就熟了。另外这里是<a href="http://git-scm.com/book/zh/v1" target="_blank" rel="external">Git官方中文教程</a>，有意者可以戳进去看看。</p>
<p>这里需要说明一点的是使用Github for Windows客户端也是可以的，而且其界面也是十分的简洁与方便，可以省去很多敲命令的操作，不过从我个人来讲，git熟练之后，效率更高。</p>
<h3 id="Nodejs:">Nodejs:</h3><p>这里只需要下载安装包，一路戳下去就行，主要是要使用npm工具。</p>
<h3 id="多说:">多说:</h3><p>因为Hexo是用于布置轻量静态博客的工具，所以评论功能需要引入外部js来实现，虽然Hexo内置了Disqus，但国内的话，还是用国内的产品好一点。</p>
<h3 id="Next_Theme:">Next Theme:</h3><p>Next是一款Hexo的主题，点击上面的链接进入其github主页，选择它纯粹是个人喜好啦，在接下来的一段时间里会对这个主题进行一些定制，暂时打算多写几套博客主题来加深自己对html5和css3还有jQuery这些基础前端知识的掌握。</p>
<h3 id="七牛:">七牛:</h3><p>图床用，以后迁移大的静态数据也方便，标准用户免费享用的资源足够个人使用。</p>
<h3 id="Sublime_Text_3:">Sublime Text 3:</h3><p>这个就不用多说了，轻量文本编辑工具，各种强大的插件与快捷操作，多少让人想到了Vim，Geek范十足！</p>
<h2 id="搭建过程">搭建过程</h2><h4 id="1-_建立github_pages">1. 建立github pages</h4><p>创建一个格式为username.github.io的repository即可。</p>
<h4 id="2-_连接github_pages">2. 连接github pages</h4><p>使用git bash shell 创建ssh key，使用该key连接。</p>
<h4 id="3-_安装Hexo">3. 安装Hexo</h4><p>在bash shell下，用npm安装Hexo，安装主题，修改配置文件，重新generate <code>hexo g</code> 然后 <code>hexo s</code>，打开localhost:4000进行测试。</p>
<h4 id="4-_购买域名">4. 购买域名</h4><p>国内域名需要备案，比较麻烦，这里使用的是国外的Godaddy（狗爹），最棒的是可以用支付宝付款。</p>
<h4 id="5-_域名绑定">5. 域名绑定</h4><p>这里使用国内的DNSpod进行DNS解析。在github pages的根目录下，直接创建一个无后缀的文件CNAME，直接编辑它的内容为你购买的域名，不需要前面的协议部分（像http或者https）,这样就完成绑定了</p>
<h4 id="6-_部署">6. 部署</h4><p>在按照自己的想法修改本地文件后，重新生成 <code>hexo g</code>，再执行 <code>hexo d</code> （之前要在配置文件对部署这一项修改好）即可部署到github，再在浏览器地址栏输入购买的域名就可以访问了。</p>
<p>这里需要注意一点的是，每次修改完本地文件后，最好是先执行 <code>hexo clean</code> 命令，然后 <code>hexo g</code> 生成静态文件，再在本地预览 <code>hexo s</code> ，发现符合效果后再进行部署。因为本人遇到过 <code>hexo new postName</code>，实际页面出现两个post的情况，采用上面的方法可以避免出现这个问题。</p>
<h2 id="遇到的问题">遇到的问题</h2><ol>
<li><p>在建立github pages时，要注意这里的username不是昵称，如果要修改username的话，步骤为 <strong>Settings-&gt;Account Settings-&gt;Change username</strong> 。此外网上有些教程后缀为.com，但应该现在的github pages应该都转到了.io，所以使用.io更好。</p>
</li>
<li><p>连接github时，网上虽然有很多教程，但有的根本没用！！！会出现怎么都连不上的情况。下面的参考资料中的方法亲测可用。另外使用github for windows就可以免去这一繁琐的步骤，因为它会自动生成key。</p>
</li>
<li><p>购买域名时，如果没多少钱的话，可以去网上搜这个时间段的Godaddy的优惠码，我注册时，貌似有优惠。不过这里我很想吐槽了，为什么提交时有左右两个按钮，我照着以前的教程貌似点了左边那个，是不是这样就没有优惠了？希望知道的人知会我一下，先谢过了。另外个人网站域名可以选择.com或者.me，网上有人说不要选择.info，因为一些黑历史，该域名被Google惩罚了。用支付宝支付时，一定要注意的是，款项单位不要用人民币（CNY），用默认的美元（USD）就行，不然会出现无法支付的问题。</p>
</li>
<li><p>最开始我是不知道怎么部署的，下面参考资料介绍的配置方法可行。</p>
</li>
<li><p>有的主题中的一些文件会使用google提供的js文件、字体或者样式，还是因为一些“你懂得”的原因，会导致加载很慢，甚至样式出现不了。推荐将其替换为国内的CDN服务，比如百度CDN公共库。</p>
</li>
</ol>
<h2 id="参考资料">参考资料</h2><ol>
<li><a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="external">http://www.jianshu.com/p/05289a4bc8b2</a></li>
<li><a href="http://www.tuicool.com/articles/uE7FJba" target="_blank" rel="external">http://www.tuicool.com/articles/uE7FJba</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>一直想做些好玩的事了，比如说做个个人网站啥的（虽然做个网站是基础中的基础，没多大技术含量……汗颜），在看到同学捣腾的<a href="http://www.jellybool.com/">作品</a>后，心向往之，但由于本人拖延症已到晚期，五月病时不时还要发作一下，迟迟未开始，在深刻认识到技术需要实践这个道理之后，终于动工啦！用《舰队collection》里面的话来说就是“不要怂，单纵就是干”！</p>
<p>这篇文章主要是对博客搭建过程做个记录，但不会很详细的讲述。以下分为三个方面来做阐述：采用的工具、搭建流程以及遇到的问题。如果这些浅薄的文字能够帮助到遇到同样问题的有缘人，那是我的荣幸。</p>
<h2 id="采用的工具">采用的工具</h2><ol>
<li><a href="http://hexo.io/">Hexo</a></li>
<li><a href="https://github.com/">Github Pages</a></li>
<li><a href="http://msysgit.github.io/">Git</a>或者<a href="https://windows.github.com/">Github for Windows</a></li>
<li><a href="http://nodejs.org/">Node.js</a></li>
<li><a href="http://duoshuo.com/">多说</a></li>
<li><a href="https://github.com/iissnan/hexo-theme-next">Next Theme</a></li>
<li><a href="http://www.qiniu.com/">七牛</a></li>
<li><a href="http://www.sublimetext.com/">Sublime Text 3</a></li>
</ol>]]>
    
    </summary>
    
      <category term="Hexo" scheme="https://nekonyan.me/tags/Hexo/"/>
    
  </entry>
  
</feed>